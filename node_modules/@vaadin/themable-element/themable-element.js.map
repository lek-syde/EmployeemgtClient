{"version":3,"file":"themable-element.js","sourceRoot":"","sources":["themable-element.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,6CAA6C,CAAC;AACxE,OAAO,EAAE,aAAa,EAAE,MAAM,4CAA4C,CAAC;AAC3E,OAAO,EAAE,UAAU,EAAE,SAAS,EAA6B,MAAM,aAAa,CAAC;AAE/E,MAAM,WAAW,GAAG,CAAC,OAA0C,EAAE,EAAE;IACjE,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,WAAW,EAAE,EAAE;QAC5D,MAAM,OAAO,GAAG,WAAW,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACrD,MAAM,OAAO,GAAG,WAAW,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAErD,MAAM,QAAQ,GAAG,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QACxC,MAAM,YAAY,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;QACrF,MAAM,YAAY,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;QAErF,IAAI,MAAM,CAAC;QAEX,IAAI,OAAO,KAAK,OAAO,EAAE;YACvB,mCAAmC;YACnC,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAC3B;aAAM,IAAI,YAAY,KAAK,YAAY,EAAE;YACxC,yCAAyC;YACzC,MAAM,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAChC;aAAM;YACL,kEAAkE;YAClE,MAAM,GAAG,CAAC,CAAC;SACZ;QAED,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,OAAO,eAAgB,SAAQ,UAAU;IAG7C,MAAM,CAAC,SAAS;QACd,MAAM,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;QACjC,MAAM,MAAM,GAAmB,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAEtD,8DAA8D;QAC9D,MAAM,EAAE,OAAO,EAAE,GAAG,SAAS,CAAC,SAAgB,CAAC;QAE/C,WAAW,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;YAC1C,MAAM,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;YAC/D,IAAI,QAAQ,EAAE;gBACZ,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,aAAqB,EAAE,EAAE;oBACpD,IAAI,IAAI,MAAM,CAAC,IAAI,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;wBACxE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;qBACnD;gBACH,CAAC,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IAChB,CAAC;CACF","sourcesContent":["import { DomModule } from '@polymer/polymer/lib/elements/dom-module.js';\nimport { cssFromModule } from '@polymer/polymer/lib/utils/style-gather.js';\nimport { LitElement, unsafeCSS, CSSResult, CSSResultArray } from 'lit-element';\n\nconst sortModules = (modules: Array<{ [s: string]: DomModule }>) => {\n  return Object.keys(modules).sort((moduleNameA, moduleNameB) => {\n    const vaadinA = moduleNameA.indexOf('vaadin-') === 0;\n    const vaadinB = moduleNameB.indexOf('vaadin-') === 0;\n\n    const prefixes = ['lumo-', 'material-'];\n    const vaadinThemeA = prefixes.filter((p) => moduleNameA.indexOf(p) === 0).length > 0;\n    const vaadinThemeB = prefixes.filter((p) => moduleNameB.indexOf(p) === 0).length > 0;\n\n    let result;\n\n    if (vaadinA !== vaadinB) {\n      // Include vaadin core styles first\n      result = vaadinA ? -1 : 1;\n    } else if (vaadinThemeA !== vaadinThemeB) {\n      // Include vaadin theme styles after that\n      result = vaadinThemeA ? -1 : 1;\n    } else {\n      // Lastly include custom styles so they override all vaadin styles\n      result = 0;\n    }\n\n    return result;\n  });\n};\n\nexport class ThemableElement extends LitElement {\n  protected static is: string;\n\n  static getStyles(): CSSResult | CSSResultArray | undefined {\n    const styles = super.getStyles();\n    const themes: CSSResultArray = styles ? [styles] : [];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const { modules } = DomModule.prototype as any;\n\n    sortModules(modules).forEach((moduleName) => {\n      const themeFor = modules[moduleName].getAttribute('theme-for');\n      if (themeFor) {\n        themeFor.split(' ').forEach((themeForToken: string) => {\n          if (new RegExp(`^${themeForToken.split('*').join('.*')}$`).test(this.is)) {\n            themes.push(unsafeCSS(cssFromModule(moduleName)));\n          }\n        });\n      }\n    });\n\n    return themes;\n  }\n}\n"]}